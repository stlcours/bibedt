/*
  BibEdt
  Copyright (C) 2005, Ascher Stefan. All rights reserved.
  stievie[at]users[dot]sourceforge[dot]net, http://bibedt.sourceforge.net/

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

  $Id: ExportRTF.cpp,v 1.28 2006/08/11 09:25:20 stievie Exp $
*/

// ExportRTF.cpp: Implementierung der Klasse CExportRTF.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "bibedt.h"
#include "ExportRTF.h"
#include "Globals.h"
#include "CodingRTF.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Konstruktion/Destruktion
//////////////////////////////////////////////////////////////////////

CExportRTF::CExportRTF()
{
	m_Name = "RTF";
}

CExportRTF::~CExportRTF()
{
}

CString CExportRTF::GetSource()
{
	return GetHeader() + GetBody() + GetFooter();
}

CString CExportRTF::GetExt()
{
	return ".rtf";
}

CString CExportRTF::GetFilter()
{
	return AfxLoadString(IDS_STRING_RTFFILTER);
}

void CExportRTF::DoExport(CString filename)
{
	CFile f;
	CString str;
	try {
		f.Open(filename, CFile::modeCreate | CFile::modeWrite | CFile::shareExclusive);
		str = GetSource();
		f.Write(str, str.GetLength());
		f.Close();
	} catch (CFileException ex) {
		ex.ReportError();
	}
}

CString CExportRTF::GetHeader()
{
	CString res = "{\\rtf1\\ansi\\deff0\\deftab720";
	res += GetFontTable();
	res += GetColorTable();
	res += "{\\info{\\comment Generated by BibEdt Version " + CAboutDlg::GetAppVersion() + "}\r\n";
	res += "{\\title Bibliography}}\r\n";
	res += "\\deflang1033\\pard\\plain\\f0\\fs24 ";
	return res;
}

CString CExportRTF::GetFooter()
{
	return "}";
}

CString CExportRTF::GetItemSource(CBibItem* item)
{
	xString* str = xsNew();
	GetItemSource(str, item);
	CString res(xsValue(str));
	xsDelete(str);
	return res;
}

void CExportRTF::GetItemSource(xString *const str, CBibItem* item)
{
	Load();

	CBibDef *def = GetBibDef();
	DWORD fontstyle = 0;
	int i = 1;
	CString strField = def->GetOrder(item->GetType(), i);
	CString format;
	CString tmp;
	CString val;
	while (!strField.IsEmpty()) {
		CField *fi = item->Find(strField);
		if (fi && !fi->GetValue().IsEmpty()) {
			val = RemoveGarbage(fi->GetExpandedValue(item->GetOwner()));

			if (strField.CompareNoCase(STR_AUTHOR) == 0 || strField.CompareNoCase(STR_EDITOR) == 0)
				val = FormatAuthors(val);
			val = m_Iconv.Convert(val);

			int r = 0;
			if (!def || def->GetConvField(fi->GetName())) {
				// Replace some common characters
				r = val.Replace(_T("---"), _T("\\emdash "));
				r = val.Replace(_T("--"), _T("\\endash "));
				r = val.Replace(_T("~"), _T(" "));
				r = val.Replace(_T("\\,"), _T(" "));
			}
			// The font style
			fontstyle = def->GetFontStyle(item->GetType(), fi->GetName());
			if (BIT_SET(fontstyle, FS_BOLD))
				val = _T("{\\b ") + val + _T("}");
			if (BIT_SET(fontstyle, FS_ITALIC))
				val = _T("{\\i ") + val + _T("}");
			if (BIT_SET(fontstyle, FS_UNDERLINE))
				val = _T("{\\u ") + val + _T("}");
			if (BIT_SET(fontstyle, FS_STRIKE))
				val = _T("{\\s ") + val + _T("}");

			format = def->GetFormat(item->GetType(), fi->GetName());
			tmp.Format(format, val);
			xsCatS(str, tmp);
		}
		i++;
		strField = def->GetOrder(item->GetType(), i);
	}
	xsTrim(str);
	xsTerminate(str);
}

CString CExportRTF::GetBody()
{
	xString* res = xsNew();

	CString str;

	DWORD counter = 0;
	POSITION h = m_BibList->GetHeadPosition();

	CBibDef *def = GetBibDef();
	BOOL printnum = def->GetBoolOption(OP_PRINT_NUM, TRUE);
	CString numformat = def->GetStrOption(OP_NUM_FORMAT, _T("[%d] "));
	DWORD fontstyle = 0;

	while (h) {
		CBibItem *bitem = (CBibItem*)m_BibList->GetNext(h);
		if (bitem->IsType(STR_STRING) || bitem->IsType(STR_PREAMBLE) || bitem->IsType(STR_COMMENT))
			continue;

		counter++;
		if (printnum) {
			str.Format(numformat, counter);
			xsCatS(res, str);
		}
		GetItemSource(res, bitem);
		xsCatS(res, _T("\r\n\\par "));
	}
	xsTerminate(res);
	CString r(xsValue(res));
	xsDelete(res);
	return r;
}

CString CExportRTF::GetFontTable()
{
	CString res;
	res.Format(_T("{\\fonttbl{\\f0\\fmodern %s;}}\r\n"), _T("Times New Roman"));
	return res;
}

CString CExportRTF::GetColorTable()
{
	return _T("{\\colortbl\\red0\\green0\\blue0;\\red0\\green0\\blue255;\\red0\\green130\\blue0;}\r\n");
}

void CExportRTF::Load()
{
	if (!m_Loaded) {
		m_Iconv.SetSourceCharset(_T("ISO88591"));
		m_Iconv.SetTargetCharset(_T("RTF"));
		m_Loaded = TRUE;
	}
}

CExport* CExportRTF::Clone()
{
	CExport* res = new CExportRTF();
	res->Assign(this);
	return res;
}
